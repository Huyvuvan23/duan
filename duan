#include <SPI.h>
#include <MFRC522.h>
#include <EEPROM.h>
 
#define SS_PIN 10
#define RST_PIN 9
MFRC522 rfid(SS_PIN, RST_PIN);
 
const int eepromStartAddress = 10;  // Địa chỉ bắt đầu lưu trữ thẻ cư dân trong EEPROM
const int maxResidents = 10;         // Số lượng thẻ cư dân tối đa
 
// Định nghĩa cấu trúc ResidentCard
struct ResidentCard {
  char type; // 'M' cho thẻ tháng, 'D' cho thẻ khách
  char uid[10]; // UID của thẻ
};
 
void setup() {
  Serial.begin(115200);
  SPI.begin();
  rfid.PCD_Init();
}
 
void loop() {
  if (rfid.PICC_IsNewCardPresent() && rfid.PICC_ReadCardSerial()) {
    // Đọc UID thẻ
    String uid = "";
    for (byte i = 0; i < rfid.uid.size; i++) {
      uid += String(rfid.uid.uidByte[i], HEX);
    }
 
    // Kiểm tra thẻ
    if (checkResidentCard(uid)) {
      Serial.println("Thẻ cư dân hợp lệ!");
    } else {
      Serial.println("Thẻ không phải cư dân!");
    }
    rfid.PICC_HaltA();
  }
}
 
bool checkResidentCard(String uid) {
  for (int i = 0; i < maxResidents; i++) {
    ResidentCard card;
    EEPROM.get(eepromStartAddress + i * sizeof(ResidentCard), card);
    if (String(card.uid) == uid) {
      return true; // Thẻ hợp lệ
    }
  }
  return false; // Thẻ không hợp lệ
}
 
// Hàm thêm thẻ cư dân
void addResidentCard(String uid, char type) {
  for (int i = 0; i < maxResidents; i++) {
    ResidentCard card;
    EEPROM.get(eepromStartAddress + i * sizeof(ResidentCard), card);
    if (card.uid[0] == '\0') { // Nếu địa chỉ còn trống
      card.type = type;
      uid.toCharArray(card.uid, 10);
      EEPROM.put(eepromStartAddress + i * sizeof(ResidentCard), card);
      Serial.println("Thêm thẻ cư dân thành công!");
      return;
    }
  }
  Serial.println("Đã đạt giới hạn thẻ cư dân!");
}
